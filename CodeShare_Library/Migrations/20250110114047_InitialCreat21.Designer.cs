// <auto-generated />
using CodeShare_Library.Date;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeShare_Library.Migrations
{
    [DbContext(typeof(CodeShareDB))]
    [Migration("20250110114047_InitialCreat21")]
    partial class InitialCreat21
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeShare_Library.Models.Changes_in_the_system", b =>
                {
                    b.Property<long>("Changes_in_the_systemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Changes_in_the_systemId"));

                    b.Property<string>("Action_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text_update")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Changes_in_the_systemId");

                    b.HasIndex("UserId");

                    b.ToTable("Changes_in_the_system");
                });

            modelBuilder.Entity("CodeShare_Library.Models.CodeSnippets", b =>
                {
                    b.Property<long>("CodeSnippetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CodeSnippetsId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("IsAdmin")
                        .HasColumnType("bigint");

                    b.Property<string>("Programming_language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CodeSnippetsId");

                    b.HasIndex("UserId");

                    b.ToTable("CodeSnippets");
                });

            modelBuilder.Entity("CodeShare_Library.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CommentId"));

                    b.Property<string>("Comment_Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RatingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Selected_Range")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SnippetsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SnippetsId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("CodeShare_Library.Models.History", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("HistoryId"));

                    b.Property<string>("Change_date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SnippetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HistoryId");

                    b.HasIndex("SnippetId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("CodeShare_Library.Models.Image", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ImageId"));

                    b.Property<string>("CreateAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LogotypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ImageId");

                    b.HasIndex("LogotypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("CodeShare_Library.Models.Logotype", b =>
                {
                    b.Property<long>("LogotypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LogotypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name_Logotype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Realtime")
                        .HasColumnType("boolean");

                    b.HasKey("LogotypeId");

                    b.HasIndex("ImageId");

                    b.ToTable("Logotype");
                });

            modelBuilder.Entity("CodeShare_Library.Models.Rate", b =>
                {
                    b.Property<long>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RateId"));

                    b.Property<string>("Name_Rate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RateId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("CodeShare_Library.Models.Roles", b =>
                {
                    b.Property<long>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RolesId"));

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RolesId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RolesId = 1L,
                            NameRole = "Админ"
                        },
                        new
                        {
                            RolesId = 2L,
                            NameRole = "Пользователь"
                        });
                });

            modelBuilder.Entity("CodeShare_Library.Models.Setting", b =>
                {
                    b.Property<long>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SettingId"));

                    b.Property<bool>("Block")
                        .HasColumnType("boolean");

                    b.Property<string>("Hide")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Prohibition")
                        .HasColumnType("boolean");

                    b.Property<long>("SnippetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Visibility_Setting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SettingId");

                    b.HasIndex("SnippetId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("CodeShare_Library.Models.Users", b =>
                {
                    b.Property<long>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UsersId"));

                    b.Property<string>("CreateAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UsersId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UsersId = 1L,
                            CreateAt = "2025-01-10 12:00:00",
                            Email = "Admin@mail.ru",
                            Password = "Admin",
                            Phone = "",
                            RoleId = 1L,
                            UpdatedAt = "2025-01-10 12:00:00",
                            UsersName = "Admin"
                        });
                });

            modelBuilder.Entity("CodeShare_Library.Models.Changes_in_the_system", b =>
                {
                    b.HasOne("CodeShare_Library.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.CodeSnippets", b =>
                {
                    b.HasOne("CodeShare_Library.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.Comment", b =>
                {
                    b.HasOne("CodeShare_Library.Models.Rate", null)
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CodeShare_Library.Models.CodeSnippets", null)
                        .WithMany()
                        .HasForeignKey("SnippetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeShare_Library.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.History", b =>
                {
                    b.HasOne("CodeShare_Library.Models.CodeSnippets", null)
                        .WithMany()
                        .HasForeignKey("SnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.Image", b =>
                {
                    b.HasOne("CodeShare_Library.Models.Logotype", null)
                        .WithMany()
                        .HasForeignKey("LogotypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeShare_Library.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.Logotype", b =>
                {
                    b.HasOne("CodeShare_Library.Models.Image", null)
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.Setting", b =>
                {
                    b.HasOne("CodeShare_Library.Models.CodeSnippets", null)
                        .WithMany()
                        .HasForeignKey("SnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeShare_Library.Models.Users", b =>
                {
                    b.HasOne("CodeShare_Library.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
