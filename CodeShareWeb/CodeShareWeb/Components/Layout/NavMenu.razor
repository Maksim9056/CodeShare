@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.Extensions.Caching.Memory
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMemoryCache MemoryCache
@inject IJSRuntime JS

<link rel="stylesheet" href="/css/main.css">
@if (!ShouldHideNavbar)
{ 
  <aside class="sidebar">

        <div class="logo">
            <p>Логотип</p>
        </div>
        <nav>
            <ul>
                <li><a href="Main" class="active">Главная</a></li>
                <li><a href="/topics">Тема</a></li>
                <li><a href="browse-topics">Просматривать темы</a></li>
            </ul>
        </nav>


    </aside>

}

@code {
    private bool ShouldHideNavbar;
    public string Rolles { get; set; }
    private readonly List<string> HiddenNavbarUrls = new()
    {
        "/",            // Главная страница
        "/login",       // Страница входа
        "/registration"     // Страница регистрации
    };
    private bool _shouldRenderAgain;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _shouldRenderAgain)
        {
            try
            {
            var currentUri = NavigationManager.Uri.ToLower();
                        var uri = new Uri(currentUri);

                        // Извлекаем часть после порта
                        var pathAfterPort = uri.AbsolutePath;
                        // Если текущий адрес совпадает с одним из HiddenNavbarUrls, скрываем navbar
                        ShouldHideNavbar = HiddenNavbarUrls.Any(url => pathAfterPort == url);

                // Вызов JavaScript
                await JS.InvokeVoidAsync("console.log", "JavaScript вызван из OnAfterRenderAsync");
                _shouldRenderAgain = false; // Сбрасываем флаг
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка в OnAfterRenderAsync: {ex.Message}");
            }
        }
    }
}





