@using Microsoft.Extensions.Caching.Memory
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMemoryCache MemoryCache

<div class="page">
    @if (ShouldHideSidebar == false)
    {
        <div class="sidebar">
         
                <NavMenu  />
            
        </div>
    }

    <main>
        @if (!ShouldHideTopRow)
        {
            <div class="top-row px-4">
                <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool ShouldHideSidebar;
    private bool ShouldHideTopRow;
    public string Rolles = "";

    private readonly List<string> HiddenSidebarUrls = new()
    {
        "/", "/login", "/registration"  ,"/reset-password"// Добавьте сюда URL, для которых скрывается sidebar
    };

    private readonly List<string> HiddenTopRowUrls = new()
    {
        "/", "/profile" // Добавьте сюда URL, для которых скрывается top-row
    };
    private bool isFirstRender = true;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     try
    //     {


    //         if (isFirstRender) // Выполняем логику только при первом рендере
    //         {
    //             // Безопасно получаем значение Roles из localStorage
    //             var roles = await localStorage.GetItemAsync<string>("Roles");
    //             Rolles = roles ?? ""; // Если null, присваиваем пустую строку

    //             StateHasChanged(); // Обновляем компонент
    //         }


    //         Console.WriteLine(firstRender);
    //     }
    //     catch(Exception e)
    //     {
    //         Console.WriteLine(e.Message);
    //     }
    // }

    protected override  void OnInitialized()
    {
        try
        {
            var currentUri = NavigationManager.Uri.ToLower();
            var uri = new Uri(currentUri);

            // Извлекаем часть после порта
            var pathAfterPort = uri.AbsolutePath;
            // Проверяем текущий URL для скрытия sidebar
            ShouldHideSidebar = HiddenSidebarUrls.Any(url => pathAfterPort == url);

            // Проверяем текущий URL для скрытия top-row
            ShouldHideTopRow = HiddenTopRowUrls.Any(url => currentUri.Contains(url));
           
            // await OnAfterRenderAsync(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}
