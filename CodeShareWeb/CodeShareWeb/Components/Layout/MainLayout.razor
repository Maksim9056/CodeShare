@using Microsoft.Extensions.Caching.Memory
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMemoryCache MemoryCache
@inject IJSRuntime JS

<div class="page">

@*     @if (ShouldHideSidebar == false)
    {
        <div class="sidebar">
                          <NavMenu  />
         
        </div>
    } *@
 @*    @if (!ShouldHideTopRow)
    {
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>
    } *@

    <main>
   

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool ShouldHideSidebar;
    private bool ShouldHideTopRow;
    public string Rolles = "";

    private readonly List<string> HiddenSidebarUrls = new()
    {
        "/", "/login", "/registration"  ,"/reset-password"// Добавьте сюда URL, для которых скрывается sidebar
    };

    private readonly List<string> HiddenTopRowUrls = new()
    {
        "/", "/profile" // Добавьте сюда URL, для которых скрывается top-row
    };
    private bool isFirstRender = true;
   public EventCallback<string> OnClickCallback { get; set; }
    private bool _shouldRenderAgain;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender || _shouldRenderAgain)
    //     {
    //         try
    //         {
    //             // Вызов JavaScript
    //             await JS.InvokeVoidAsync("console.log", "JavaScript вызван из OnAfterRenderAsync");
    //             _shouldRenderAgain = false; // Сбрасываем флаг
    //         }
    //         catch (Exception ex)
    //         {
    //             Console.WriteLine($"Ошибка в OnAfterRenderAsync: {ex.Message}");
    //         }
    //     }
    // }
    private string role;

    protected override async Task OnInitializedAsync()
    {
        var currentUri = NavigationManager.Uri.ToLower();
                var uri = new Uri(currentUri);

                // Извлекаем часть после порта
                var pathAfterPort = uri.AbsolutePath;
                // Проверяем текущий URL для скрытия sidebar
                ShouldHideSidebar = HiddenSidebarUrls.Any(url => pathAfterPort == url);

                // Проверяем текущий URL для скрытия top-row
                ShouldHideTopRow = HiddenTopRowUrls.Any(url => currentUri.Contains(url));
        // role = await localStorage.GetItemAsync<string>("Roles");

        // Console.WriteLine($"Роль: {role}");
    }
    // protected override  void OnInitialized()
    // {
    //     try
    //     {
    //         var currentUri = NavigationManager.Uri.ToLower();
    //         var uri = new Uri(currentUri);

    //         // Извлекаем часть после порта
    //         var pathAfterPort = uri.AbsolutePath;
    //         // Проверяем текущий URL для скрытия sidebar
    //         ShouldHideSidebar = HiddenSidebarUrls.Any(url => pathAfterPort == url);

    //         // Проверяем текущий URL для скрытия top-row
    //         ShouldHideTopRow = HiddenTopRowUrls.Any(url => currentUri.Contains(url));
           
    //         // await OnAfterRenderAsync(true);
    //     }
    //     catch (Exception e)
    //     {
    //         Console.WriteLine(e.Message);
    //     }
    // }

}
