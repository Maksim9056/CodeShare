@page "/System-update-list"
@using CodeShareWeb.Components.Layout
@using CodeShare_Library.Abstractions
@using CodeShare_Library.Models
@using Serilog
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject CodeShare_Library.Abstractions.IChanges_in_the_system IChanges_in_the_system
<link rel="stylesheet" href="/css/system-update-list.css">
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Изменения в системе</title>



<div class="container">
    <Sidebar roles="roles" />




    <div class="content">
        <!-- Информация о пользователе -->
       @*  <div class="user-info">
            <span class="user-name">Имя</span>
            <div class="user-icon"></div>
        </div> *@
        <!-- Список обновлений -->
        <div class="updates-container">
            <div class="updates-list">
                <h3>Список обновлений</h3>
                @foreach (var change_sytem in view_Changes_in_the_system)
                {
                    <div class="update-item">@change_sytem.Action_Type : @change_sytem.Text_update @change_sytem.CreateAt</div>
                }
            </div>
            <div class="buttons">
                <button class="button add-button" @onclick="Create">Добавить</button>

                <button @onclick="Load">
                    @(isLoading ? "Загрузка..." : hasMore ? "Показать ещё" : "Больше измениний  нету")
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    Roles roles = new Roles() { RolesId = 1, NameRole = "" };
    private bool isLoading = false;
    private bool hasMore = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {


            Console.WriteLine($"OnInitialized вызван в {DateTime.Now}");

        }
        catch (Exception)
        {

        }
    }
    HashSet<long> loadedIds = new HashSet<long>(); // Создаем пустой набор для уникальных Id
    private int take = 5;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {

            if (firstRender)
            {
                await Load();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log.Error(ex.Message);

        }
    }

    List<Changes_in_the_system> view_Changes_in_the_system = new List<Changes_in_the_system>();
    public async Task Load()
    {
        try
        {
            if (isLoading) return;
            var Changes_in_the_system = await IChanges_in_the_system.ListAll(take, loadedIds);

            isLoading = true;
            if (Changes_in_the_system != null && Changes_in_the_system.Any())
            {

                foreach (var Changes_in_the_system_Check in Changes_in_the_system)
                {

                    view_Changes_in_the_system.Add(Changes_in_the_system_Check);
                    loadedIds.Add(Changes_in_the_system_Check.Changes_in_the_systemId);
                }

            }
            else
            {
                hasMore = false;
            }

            isLoading = false;

        }
        catch (Exception ex)
        {
            Log.Error(ex.Message);

        }
    }
    public async Task Create()
    {
        NavigationManager.NavigateTo("/System-updates");
    }

}
