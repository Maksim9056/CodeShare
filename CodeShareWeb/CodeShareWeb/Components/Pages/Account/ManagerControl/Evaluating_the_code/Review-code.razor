@page "/review-code"
@using CodeShareWeb.Components.Layout
@using CodeShare_Library.Abstractions
@using CodeShare_Library.Models
@using Serilog
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ICodeShareCodeSnippets ICodeShareCodeSnippets
@inject ILanguage ILanguage
@inject IUserServise UserService
@inject ICommentService ICommentService
@inject IRateService IRateService
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Проверка кода</title>
<link rel="stylesheet" href="/css/review-code.css">
<style>
    .code-line {
    cursor: pointer;
    padding: 5px;
    }
    .selected {
    background-color: lightblue;
    }
</style>

<div class="container">

    <Sidebar roles="roles" />
    <!-- Основной контент -->
    <main class="content">
        <header class="header">
            <h1>Проверка кода и оценка</h1>
            <div class="user-settings">
                <span>Имя</span>
                <div class="avatar"></div>
                <a href="/User-profile">Настройки</a>
            </div>

        </header>
        <!-- Код и инструменты -->
        <section class="code-review">

            <div class="code-container">
                <button @onclick="Comments_management">Настройки темы</button>

                <div class="code-header">

                    @if (language !=null)
                    {
                    <h2>
                            Код  <span class="language">:@language.Programming_language</span>
                    </h2>
                    }
                </div>
                <div class="code-section" id="code-display">
                    @foreach (var line in CodeLines)
                    {
                        <div class="code-line @(IsSelected(line) ? "selected" : "")"
                        @onclick="() => OnLineClick(line)">
                            <span class="line-number">@line.LineNumber:</span>
                            <span class="line-content">@line.Content</span>
                        </div>
                    }

                </div>

            </div>

            <!-- Форма комментариев -->
            <div class="comments-section">
                <h3>Оставьте комментарий</h3>
                <form  method="POST">
                    <div class="form-group">
                        <label for="selected-range">Выбранный диапазон :</label>
                        <input type="text" value="@GetSelectedRange()" id="selected-range" readonly placeholder="Нажмите на линии, чтобы выбрать диапозон" />
                    </div>

                    <div class="form-group">
                        <textarea id="comment" @bind="Comment_Text" name="comment" rows="4" placeholder="Напишите свой комментарий здесь..."></textarea>
                    </div>

                    <div class="form-group">
                        <label for="rating">Оцените этот код:</label>
                        Rate
                        <select id="rating" name="rating" @onchange="OnLanguageChanged">
                           @foreach (var line in Rate)
                           {
                                <option value="@line.RateId">@line.Name_Rate</option>
                           
                           }
                                </select>
                    </div>

                    <div class="form-buttons">
                        <button type="button" @onclick="Create_Comment" class="save-button">Сохранить</button>
                        <button type="button" class="cancel-button" @onclick="GetSelected">Отменить выбранный диапазон</button>
                    </div>
                </form>
            </div>

            <!-- Фильтры -->
            <div class="filters">
                <h3>Фильтры</h3>
                <div class="filter-group">
                    <label for="filter-rating">Фильтр по рейтингу:</label>
                    <select id="filter-rating">
                        <option value="all">Все</option>
                        <option value="excellent">Отлично</option>
                        <option value="good">Хорошо</option>
                        <option value="average">Средне</option>
                        <option value="bad">Плохо</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filter-range">Фильтр по диапазону:</label>
                    <input type="text" id="filter-range" placeholder="Введите диапазон, например, 1-3">
                </div>
                <div class="filter-group">
                    <label for="filter-user">Фильтр по пользователю:</label>
                    <input type="text" id="filter-user" placeholder="Введите имя пользователя">
                </div>
            </div>

            <!-- Комментарии -->
            <div class="comments">
                <h3>Комментарии</h3>
                <ul class="comments-list">
                    @foreach (var comment in Comments)
                    {
                        <li>@comment.Comment_Text</li>
                        <li>@comment.Selected_Range</li>
                        <li>@comment.UserId</li>
                        <li>@comment.CreateAt</li>

                    }
                </ul>
                <button @onclick="LoadMoreComments" >
                    @(isLoading ? "Загрузка..." : hasMore ? "Показать ещё" : "Больше комментариев нет")
                </button>
            </div>
        </section>
    </main>
</div>

@code {


    // <h3>Комментарии</h3>
    // <ul class="comments-list">
    //     <li>Комментарий 1...</li>
    //     <li>Комментарий 2...</li>
    //     <li>Комментарий 3...</li>
    // </ul>
    public string Comment_Text { get; set; }
    Language language = null;
    Roles roles = new Roles() { RolesId = 2, NameRole = "" };
    CodeSnippets codeSnippets = new CodeSnippets() { };
    Users users = new Users() { };
    private CodeLine? firstSelectedLine = null;
    private CodeLine? lastSelectedLine = null;
    private HashSet<int> SelectedLines = new();
    private CodeSnippets snippet = new CodeSnippets
        {
            CodeSnippetsId = 1,
            Title = "Callback method snippet",
            Code = "public void Comments_management()\n{\n    NavigationManager.NavigateTo(\"/Seting\");\n}",
            UserId = 123,
            Description = "Пример метода, выполняющего навигацию в приложении",
            IsAdmin = 0,
            CreateAt = "2025-01-01",
            UpdateAt = "2025-01-05",
            Programming_language = 1
    };
    public List<Comment> Comments = new List<Comment>();

    public Comment Comment = new Comment() { };
    private List<CodeLine> CodeLines { get; set; } = new();
    Rate Rates = new Rate() {RateId=0 };
    private List<Rate> Rate { get; set; } = new();
    private int skip = 0;
    private  int take = 5;
    private bool isLoading = false;
    private bool hasMore = true;
    HashSet<long> loadedIds = new HashSet<long>(); // Создаем пустой набор для уникальных Id

    protected override void OnInitialized()
    {
        // Разбиваем код на строки

    }

    private void OnLanguageChanged(ChangeEventArgs e)
    {
        // = e.Value.ToString();
        Rates.RateId = Convert.ToInt64(e.Value.ToString());
        // Логика, выполняемая при изменении выбора
        Console.WriteLine($"Выбранный язык: {codeSnippets.Programming_language}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {

            if (firstRender)
            {


                var keyUser = await localStorage.GetItemAsStringAsync("CodeUserId");
                var users = await UserService.GetUser(Convert.ToInt64(keyUser));
                Log.Information($"Получили{users.UsersName} значение теме" +  users.UsersId );

                var key = await localStorage.GetItemAsStringAsync("CodeShareId");
                Console.WriteLine(key);
                Log.Information($"Пользователь{users.UsersName}  CodeShareId  {codeSnippets.CodeSnippetsId}    {codeSnippets.Title} {codeSnippets.Programming_language}");
                codeSnippets = await ICodeShareCodeSnippets.GetCodeSnippets(Convert.ToInt64(key));

                //(key);
                var lines = codeSnippets.Code.Split('\n');
                for (int i = 0; i < lines.Length; i++)
                {
                    CodeLines.Add(new CodeLine
                        {
                            LineNumber = i + 1,
                            Content = lines[i]
                        });
                }
                language = new Language();
                language = await ILanguage.GetByIdAsync(codeSnippets.Programming_language);
                Log.Information($"Пользователь{users.UsersName}  CodeShareId {codeSnippets.CodeSnippetsId}   {codeSnippets.Title} {language.Programming_language}");
                Comment.UserId = users.UsersId;
                Comment.SnippetsId = codeSnippets.CodeSnippetsId;
                Rate = await  IRateService.GetListRates();
                // ICommentService.GetListComment(key);
                await   LoadMoreComments();
            }
            StateHasChanged();

        }
        catch(Exception ex)
        {
            Log.Error(ex.Message);
            Console.WriteLine(ex.Message);
        }

    }
    private async Task LoadMoreComments()
    {
        if (isLoading) return;
        isLoading = true;
        // var newComments = await ICommentService.GetListComment(codeSnippets.CodeSnippetsId, skip, take, loadedIds);
        // if (newComments != null && newComments.Any())
        // {

        //     skip += take;
        //     var comment = newComments.Where(comment => !loadedIds.Contains(comment.CommentId)).ToList();


        //    Parallel.ForEach(comment, comment_new =>
        //    {
        //         Comments.Add(comment_new);

        //        loadedIds.Add(comment_new.CommentId);

        //    });

        // }
        // else
        // {
        //     hasMore = false;
        // }
        var newComments = await ICommentService.GetListComment(codeSnippets.CodeSnippetsId, skip, take, loadedIds);

        if (newComments != null && newComments.Any())
        {
            // var comment = newComments.Where(comment => !loadedIds.Contains(comment.CommentId)).ToList();

            // if (comment.Any()) // Увеличиваем skip только если добавили новые комментарии
            // {
            //     skip += take;
            // }
            // take = take  ;
            foreach (var comment_new in newComments)
            {
                Comments.Add(comment_new);
                loadedIds.Add(comment_new.CommentId);
            }
        }
        else
        {
            hasMore = false;
        }

        isLoading = false;

    }

    private bool IsSelected(CodeLine line)
    {
        if (firstSelectedLine == null || lastSelectedLine == null)
            return false;

        int start = Math.Min(firstSelectedLine.LineNumber, lastSelectedLine.LineNumber);
        int end = Math.Max(firstSelectedLine.LineNumber, lastSelectedLine.LineNumber);

        return line.LineNumber >= start && line.LineNumber <= end;
    }

    private void OnLineClick(CodeLine line)
    {
        if (firstSelectedLine == null)
        {
            // Первая строка выбрана
            firstSelectedLine = line;
            lastSelectedLine = line;
        }
        else
        {
            // Вторая строка выбрана, определяем диапазон
            lastSelectedLine = line;
            firstSelectedLine = firstSelectedLine.LineNumber < lastSelectedLine.LineNumber ? firstSelectedLine : lastSelectedLine;
        }

        Console.WriteLine($"Выбран диапазон: {GetSelectedRange()}");
    }
    // Здесь можно реализовать дополнительные действия (например, редактирование строки)
    private string GetSelectedRange()
    {
        if (firstSelectedLine == null || lastSelectedLine == null)
            return "Ничего не выбрано";

        return $"{Math.Min(firstSelectedLine.LineNumber, lastSelectedLine.LineNumber)} - {Math.Max(firstSelectedLine.LineNumber, lastSelectedLine.LineNumber)}";
    }
    public void GetSelected()
    {
        // firstSelectedLine.LineNumber = ;
        if (firstSelectedLine != null)
        {
            firstSelectedLine = null;
            lastSelectedLine = null;
            SelectedLines = new();
        }

    }

    public async Task Create_Comment()
    {
        Comment.CreateAt = $"{DateTime.Now}";
        Comment.Selected_Range = GetSelectedRange();
        // Comment.Name_Comment
        Comment.RatingId = Rates.RateId;
        Comment.Comment_Text = Comment_Text;
        Comment.CommentId = 0;
        Comment.Name_Comment = Comment_Text;
        var comment = await ICommentService.AddComment(Comment);

    }

    private class CodeLine
    {
        public int LineNumber { get; set; }
        public string Content { get; set; }
    }
    public void Comments_management()
    {
        NavigationManager.NavigateTo("/Seting");
    }

}
@* <div class="code-line" data-line="1"><span class="line-number">1</span> int main() {</div>
<div class="code-line" data-line="2"><span class="line-number">2</span>     printf("Hello, World!\n");</div>
<div class="code-line" data-line="3"><span class="line-number">3</span>     return 0;</div>
<div class="code-line" data-line="4"><span class="line-number">4</span> }</div> *@