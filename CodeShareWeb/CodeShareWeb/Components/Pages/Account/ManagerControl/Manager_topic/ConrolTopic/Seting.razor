@page "/Seting"
@using CodeShareWeb.Components.Layout
@using CodeShare_Library.Abstractions
@using CodeShare_Library.Models
@using Serilog
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ISettingService ISettingService
@inject ICodeShareCodeSnippets ICodeShareCodeSnippets
@inject IFilesService IFilesService
@inject IUserServise UserService

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<link rel="stylesheet" href="/css/settings.css">

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Настройки Темы</title>
<div class="container">
    <Sidebar roles="roles" />
    <!-- Основной контент -->
<main class="content">
    <header class="header">
        <h1>Настройки Темы</h1>
            @if (Users.UsersName != null)
            {
                <div class="user-settings">
                    <span>@Users.UsersName</span>
                <div class="logo">

                    <img src="data:image/png;base64,@Image.ImageDate" alt="Аватар пользователя" class="logosy" />
                </div>              <a href="#">Настройки</a>
        </div>
            }
    </header>

    <section class="settings">
        @if (DELETE == false)
            {


                <h2>Настройки доступа</h2>
                <div class="visibility">
                    <h3>Видимость темы</h3>
                    <button class="button private" @onclick="Private">Приватное</button>
                    <button class="button public" @onclick="Public" >Публичное</button>
                </div>

                <div class="comments-settings">
                    <h3>Настройки для комментариев</h3>
                <button class="button hide" @onclick="Comments_management">Скрывать</button>
                <button class="button block" @onclick="Block_Comments_management">Заблокировать  </button>
                    <button class="button ban" @onclick="Private_Commetr">Запретить </button>
            <button class="button allow" @onclick="permission_Commetr" >Разрешить</button>
        </div>

        <div class="actions">
            <button class="button delete">Удалить</button>
                <button class="button delete-theme" @onclick="Delete">Удалить тему</button>
        </div>

        <div class="save">
            <button @onclick="Save" class="button save">Сохранить</button>
                </div>
            }
            else
            {
                <p>Тема  удалили !Перейди на другую тему.</p>
            }

    </section>
</main>
</div>

@code{
    Roles roles = new Roles() { RolesId = 2, NameRole = "" };
    CodeSnippets codeSnippets = new CodeSnippets();
    public bool DELETE = false;
    CodeShare_Library.Models.Setting Setings = new CodeShare_Library.Models.Setting();
    Image Image = new Image() { };
    Users Users = new Users() { };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {

            if (firstRender)
            {
                var key = await localStorage.GetItemAsStringAsync("CodeShareId");
                Console.WriteLine(key);

                codeSnippets = await ICodeShareCodeSnippets.GetCodeSnippets(Convert.ToInt64(key));

                if (codeSnippets.Title != null)
                {
                    Setings = await ISettingService.Get(codeSnippets.CodeSnippetsId);
                }
                else
                {
                    DELETE = true;
                }

                var keyUser = await localStorage.GetItemAsStringAsync("CodeUserId");
                var users = await UserService.GetUser(Convert.ToInt64(keyUser));
                Image = await IFilesService.Get(users);

            }
        }
        catch(Exception ex)
        {
            Log.Error(ex.Message);

        }
    }
    public void Comments_management()
    {
        NavigationManager.NavigateTo("/Comments-management");
    }

    public void Block_Comments_management()
    {
        NavigationManager.NavigateTo("/Comments-managementblock");
    }

    public void Save()
    {
        // NavigationManager.NavigateTo("/Comments-management");
    }

    public async Task Public()
    {
        try
        {
            Setings.Visibility_Setting = "Public";

            Setings = await ISettingService.Update(Setings);
            // NavigationManager.NavigateTo("/Comments-management");
        }
        catch
        {

        }
    }
    public async Task permission_Commetr()
    {
        try
        {
            Setings.Block = false;

            Setings = await ISettingService.Update(Setings);
            // NavigationManager.NavigateTo("/Comments-management");
        }
        catch (Exception)
        {

        }
    }
    public async Task Private_Commetr()
    {
        try
        {
            Setings.Block = true;

            Setings = await ISettingService.Update(Setings);
            // NavigationManager.NavigateTo("/Comments-management");
        }
        catch (Exception)
        {

        }
    }
 
    public async Task Private()
    {
        try
        {
            Setings.Visibility_Setting = "Private";

            Setings = await ISettingService.Update(Setings);
            // NavigationManager.NavigateTo("/Comments-management");
        }
        catch(Exception)
        {
            
        }
    }



    public async Task Delete()
    {

        NavigationManager.NavigateTo("/topicdelete");

   
    }
}