@page "/browse-topics"
@using CodeShareWeb.Components.Layout
@using CodeShare_Library.Abstractions
@using CodeShare_Library.Models
@using Serilog
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ICodeShareCodeSnippets ICodeShareCodeSnippets
@inject ILanguage ILanguage
@inject IUserServise UserService
@inject ICommentService ICommentService
@inject IRateService IRateService
@inject IFilesService IFilesService

@inject NavigationManager NavigationManager
<title> Просмотр тем</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="/css/browse-topics.css">
<div class="container">
    <Sidebar roles="roles" />
    <!-- Основной контент -->
<main class="content">
    <header class="header">
            @if (Users.UsersName != null)
            {


                <h1>Просмотр тем</h1>
                <div class="user-settings">
                    <span>@Users.UsersName</span>
                <div class="logo">

                    <img src="data:image/png;base64,@Image.ImageDate" alt="Аватар пользователя" class="logosy" />
                </div>
                <a href="/User-profile">Настройки</a>
        </div>}
    </header>

    <!-- Поиск -->
    <div class="search-bar">
        <input type="text" placeholder="Поиск темы..." class="search-input">
        <button class="search-button">Найти</button>
    </div>

    <!-- Список тем -->
    <section class="topics-list">

            @foreach (var CodeSnippets in CodeSnippetsViewS)
            {
                <div class="topic-item">
                    <span class="topic-title">@CodeSnippets.Title</span>
                    <span class="topic-language"> @Distant @CodeSnippets.Programming_language.Programming_language</span>
                    <button class="go-to-button" @onclick="() => Comments_management(CodeSnippets.CodeSnippetsId)">Перейти</button>
                </div>
            }

       @*      <div class="topic-item">
            <span class="topic-title">Тема 1</span>
            <span class="topic-language">C++</span>
            <button class="go-to-button">Перейти</button>
        </div>
        <div class="topic-item">
            <span class="topic-title">Тема 2</span>
            <span class="topic-language">Python</span>
            <button class="go-to-button">Перейти</button>
        </div>
        <div class="topic-item">
            <span class="topic-title">Тема 3</span>
            <span class="topic-language">Java</span>
            <button class="go-to-button">Перейти</button>
        </div> *@

            <button @onclick="Find">
                @(isLoading ? "Загрузка..." : hasMore ? "Показать ещё" : "Больше тем нет")
            </button>
    </section>
</main>
</div>
@code 
{
    string Distant ="\n:";
    Roles roles = new Roles() { RolesId = 2, NameRole = "" };
    public List<CodeSnippets> CodeSnippets = new List<CodeSnippets>();
    Image Image = new Image() { };
    Users Users = new Users() { };

    protected override async Task OnInitializedAsync()
    {
        try
        {


            Console.WriteLine($"OnInitialized вызван в {DateTime.Now}");

        }
        catch (Exception)
        {

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {

            if (firstRender)
            {

                var keyUser = await localStorage.GetItemAsStringAsync("CodeUserId");
                var users = await UserService.GetUser(Convert.ToInt64(keyUser));
                // Log.Information($"Получили{users.UsersName} значение теме" + users.UsersId);
                Users = users;
                // var key = await localStorage.GetItemAsStringAsync("CodeShareId");
                // Console.WriteLine(key);
                // Log.Information($"Пользователь{users.UsersName}  CodeShareId  {codeSnippets.CodeSnippetsId}    {codeSnippets.Title} {codeSnippets.Programming_language}");
                // codeSnippets = await ICodeShareCodeSnippets.GetCodeSnippets(Convert.ToInt64(key));

                // //(key);
                // var lines = codeSnippets.Code.Split('\n');
                // for (int i = 0; i < lines.Length; i++)
                // {
                //     CodeLines.Add(new CodeLine
                //         {
                //             LineNumber = i + 1,
                //             Content = lines[i]
                //         });
                // }
                // language = new Language();
                // language = await ILanguage.GetByIdAsync(codeSnippets.Programming_language);
                // Log.Information($"Пользователь{users.UsersName}  CodeShareId {codeSnippets.CodeSnippetsId}   {codeSnippets.Title} {language.Programming_language}");
                // Comment.UserId = users.UsersId;
                // Comment.SnippetsId = codeSnippets.CodeSnippetsId;
                // Rate = await IRateService.GetListRates();
                // // ICommentService.GetListComment(key);
                // await LoadMoreComments();
                Image = await IFilesService.Get(users);

                await   Find();

            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Log.Error(ex.Message);
            Console.WriteLine(ex.Message);
        }

    }
    private int take = 5;
    private bool isLoading = false;
    private bool hasMore = true;
    HashSet<long> loadedIds = new HashSet<long>(); // Создаем пустой набор для уникальных Id
    public List<CodeSnippetsView> CodeSnippetsViewS = new List<CodeSnippetsView>();

    public async Task Find()
    {
        try
        {
            if (isLoading) return;
            isLoading = true;

            // var newComments = await ICommentService.GetListComment(codeSnippets.CodeSnippetsId, skip, take, loadedIds);
            var _new_CodeSnippets = await ICodeShareCodeSnippets.GetAllCodeSnippets(take, loadedIds);

            if (_new_CodeSnippets != null && _new_CodeSnippets.Any())
            {

                foreach (var CodeSnippets_new in _new_CodeSnippets)
                {
                    
                    var language = new Language();
                    language = await ILanguage.GetByIdAsync(CodeSnippets_new.Programming_language);
                    CodeSnippetsView codeSnippetsView = new CodeSnippetsView(CodeSnippets_new, language);
                    CodeSnippetsViewS.Add(codeSnippetsView);
                    // CodeSnippets.Add(CodeSnippets_new);
                    loadedIds.Add(CodeSnippets_new.CodeSnippetsId);
                }
            }
            else
            {
                hasMore = false;
            }

            isLoading = false;
        }
        catch(Exception e)
        {
            Log.Error(e.Message);
        }

    }
    public async Task Comments_management(long CodeShare)
    {
        await localStorage.SetItemAsync("CodeShareId", CodeShare);
        NavigationManager.NavigateTo("/review-code");
    }
    public class CodeSnippetsView
    {

        public long CodeSnippetsId { get; set; }

        public string Title { get; set; }
        public string Code { get; set; }

        public long UserId { get; set; }
        public string Description { get; set; }

        public long IsAdmin { get; set; }

        public string CreateAt { get; set; }
        public string UpdateAt { get; set; }

        public Language Programming_language { get; set; }

        public CodeSnippetsView(CodeSnippets CodeSnippets, Language language)
        {
            CodeSnippetsId = CodeSnippets.CodeSnippetsId;
            Title = CodeSnippets.Title;
            Code = CodeSnippets.Code;

            UserId = CodeSnippets.UserId;
            Programming_language = language;
        }

    }


}
