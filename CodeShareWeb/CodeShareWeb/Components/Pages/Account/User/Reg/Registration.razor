@page "/Registration"
@using CodeShare_Library.Abstractions
@using CodeShare_Library.Models
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IRolesProvider RolesProvider
@inject HttpClient httpClient
@inject IConfiguration IConfiguration
@inject IUserServise IUserServise
<title>CodeShare - Регистрация</title>
<link rel="stylesheet" href="/css/registration.css">
<div class="container">
    <div class="logo">
        <p>CodeShare</p>
    </div>
    <div class="form-box">
        <h1>Регистрация</h1>
        <p>Заполните поля для создания аккаунта</p>
        <form>
            <div class="input-group">
                <label for="name">Имя</label>
                <input type="text" @bind="user.UsersName" id="name" placeholder="Введите ваше имя" required>
            </div>
            <div class="input-group">
                <label for="phone">Телефон</label>
                <input type="tel" @bind="user.Phone" id="phone" placeholder="+7 (900) 123-45-67" required>
            </div>
            <div class="input-group">
                <label for="email">Почта</label>
                <input type="email" @bind="user.Email" id="email" placeholder="example@email.com" required>
            </div>
            <div class="input-group">
                <label for="password">Пароль</label>
                <input type="password" @bind="user.Password"  id="password" placeholder="Введите пароль" required>
            </div>
            <div class="input-group">
                <label for="role">Роль:</label>
                <select id="role" @onclick="OnRoleChanged">
                    <option value="@Roles.RolesId">@Roles.NameRole</option>
                </select>
            </div>
            <div class="button-group">
                <button type="button" @onclick="Calback" class="cancel-button">Отмена</button>
                <button type="submit" @onclick="Reg" class="register-button">Регистрация</button>
            </div>
        </form>
    </div>
</div>

@code {
    public Users user = new Users() { RoleId =0};
    public Roles Roles= new Roles() { };
    protected override async Task OnInitializedAsync()
    {
        try
        {

            Roles = await RolesProvider.GetUser();

        }
        catch(Exception e)
        {

            Console.WriteLine(e.Message);
        }
    }


    private void OnRoleChanged()
    {
        // Изменение значения user.RoleId вручную
        user.RoleId = Roles.RolesId;

        // Обновляем отображаемое имя роли
    }

    public void Calback()
    {
        NavigationManager.NavigateTo("/");
    }

    public async void Reg()
    {
        user.CreateAt = $"{DateTime.Now}";
        user.UpdatedAt = "";

         await IUserServise.CreateUser(user);
         NavigationManager.NavigateTo("/");
    }
}
