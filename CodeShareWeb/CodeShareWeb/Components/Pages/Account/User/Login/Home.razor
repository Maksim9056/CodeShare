@page "/"
@using CodeShare_Library.Abstractions
@using CodeShare_Library.Models
@using CodeShare_Library.Service
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.Extensions.Caching.Memory
@using Serilog
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IMemoryCache MemoryCache
@inject IUserServise UserService

<link rel="stylesheet" href="/css/login.css">

<div class="login-container">
    <div class="logo">
        <p>CodeShare</p>
    </div>
    <div class="login-box">
        <h1>Добро пожаловать!</h1>
        <p>Введите ваши данные для входа</p>
        <form>
            <div class="input-group">
                <label for="email">Почта</label>
                <input type="email" @bind="Email" id="email" placeholder="example@email.com" required>
            </div>
            <div class="input-group">
                <label for="password">Пароль</label>
                <input type="password" @bind="Password" id="password" placeholder="Введите пароль" required>
            </div>
            <a href="Reset-password" class="forgot-password">Забыли пароль?</a>
            <div class="button-group">
                <button type="button" @onclick="Reg" class="register-button">Регистрация</button>
                <button type="button" @onclick="Log_" class="login-button">Войти</button>
            </div>
        </form>
    </div>
</div>

<p>@authMessage</p>

@* @if (claims.Any())
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
} *@

@code
{
    public string Email="";
    public string Password="";

    private string? authMessage;
    private string? surname;
    // private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        try
        {


            Console.WriteLine($"OnInitialized вызван в {DateTime.Now}");

        }
        catch (Exception)
        {

        }
    }





    public void Reg()
    {
        NavigationManager.NavigateTo("/Registration");
        Log.Information("/Registration");

    }


    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     Console.WriteLine($"OnAfterRenderAsync вызван в {DateTime.Now}, firstRender: {firstRender}");

    //     if (firstRender)
    //     {
    //         try
    //         {

    //         }
    //         catch
    //         {

    //         }
    //     } 
    // }

    public async Task Log_()
    {
        try
        {

            if (!string.IsNullOrEmpty(Email) && !string.IsNullOrEmpty(Password))
            {



                var users = await UserService.CheckUser(Email, Password);

                if (users != null)
                {

                    // var role = new Roles
                    //     {
                    //         RolesId = 1,
                    //         NameRole = "Пользователь"
                    //     };

                    // Создаем клеймы
                    // var customAuthStateProvider = AuthStateProvider as CustomAuthenticationStateProvider;
                    // customAuthStateProvider?.SignIn(users.Email, role.NameRole);
                    // MemoryCache.Set("Id", users.UsersId);
                    // MemoryCache.Set("Roles", role.NameRole);
                    // await localStorage.SetItemAsync("Id", users.UsersId);
                    // await localStorage.SetItemAsync("Roles", users.RoleId);
                    switch (users.RoleId)
                    {                    

                        case 2:
                            await localStorage.SetItemAsync("CodeUserId", users.UsersId);
                            await localStorage.SetItemAsync("CodeUserRoleId", users.RoleId);
                            NavigationManager.NavigateTo("/Main");
                            authMessage = "Вы успешно вошли в систему!";
                            break;

                        case 1:
                            Log.Information("Get  Find / Users {@User}  ", users);
     
                            await localStorage.SetItemAsync("CodeUserAdminId", users.UsersId);
                            await localStorage.SetItemAsync("CodeUserRoleId", users.RoleId);
                            NavigationManager.NavigateTo("/Account-settings");
                     
                            authMessage = "Вы успешно вошли в систему!";

                            break;
                    }



                }
                else
                {
                    Console.WriteLine("Пользователь не найден или пароль неверный.");

                    authMessage = "Пользователь не найден или пароль неверный или пользователя имя.";
                    Log.Information(authMessage);

                    // StateHasChanged();
                    StateHasChanged();
                }
            }
            else
            {
                if (string.IsNullOrEmpty(Password) && string.IsNullOrEmpty(Email))
                {
                    authMessage = $"Не ввели Email  {Email}  и  Password {Password}.";
                    Log.Information(authMessage);


                }
                else
                {
                    if (string.IsNullOrEmpty(Email))
                    {
                        authMessage = "Email не может быть пустым.";
                        Log.Information(authMessage);

                    }

                    if (string.IsNullOrEmpty(Password))
                    {
                        authMessage = "Пароль не может быть пустым.";
                        Log.Information(authMessage);

                    }
                }

             
            }
        }
        catch(Exception e)
        {
            Log.Information(e.Message);

        }


   
    }
}